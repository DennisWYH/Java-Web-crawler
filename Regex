import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class WebCrawler {
		private static Scanner sc;
	private static Map<String,Integer> links = new HashMap<String,Integer>();

	// Method to store urls in HashMap
	public static void storeData(String urlName){
		if(links.containsKey(urlName)){
			links.put(urlName, links.get(urlName)+1);	        				
		}
		else{
			links.put(urlName, 1);
		}
	}
	//Given a href = "http://sdfadfa" format, retrieve only the domain name.
	public static String retrieveDomain1(String input){
		String[] result = input.split("/");
	    String domainName = result[2];
		return domainName;
	}
	
	//Given a href="sdfadfa" format, retrieve only the domain name.
		public static String retrieveDomain2(String input){
			String[] result = input.split("\"");
		    String domainName = result[0];
			return domainName;
		}
	
	//Given a "www.dfadfadf.com", retrieve only the domain name.
		public static String retrieveDomain3(String input){
			String[] result = input.split("www");
		    String domainName = result[1];
			return domainName;
		}
					
	public static void main(String[] args){
		// Recognize any line contains space + <a> + space
		String regex1 = "(.*?)(<a)(\\s{1})(.*)(href=)(\")(.*?)(\")(.*?)";
		Pattern pattern1 = Pattern.compile(regex1);
		System.out.println("Please type in the url link: ");
	    sc = new Scanner(System.in);
	    String input = sc.next();
	    String domainName = retrieveDomain1(input);
	    links.put(domainName, 0);
		try {
			URL url = new URL(input);
			InputStream page = url.openStream();
			BufferedReader in = new BufferedReader(new InputStreamReader(page));
	        String inputLine;
	        while ((inputLine = in.readLine()) != null){
	        	Matcher match = pattern1.matcher(inputLine);
	        	Boolean bol = match.matches();
	        	if(bol){
		        	String afterhref = match.group(7);	
		        	if(afterhref.startsWith("/")){
	        			links.put(domainName, links.get(domainName)+1);
	        		}
	        		else if(afterhref.startsWith("http")){
	        			String newDomain = retrieveDomain1(afterhref);
	        			if(newDomain.startsWith("wwww")){
	        				String domain = retrieveDomain3(afterhref);
	        				storeData(domain);
	        			}
	        			else{
	        				storeData(newDomain);
	        			}
	        		}
	        		else{
	        			String newDomain = retrieveDomain2(afterhref);
        				storeData(newDomain);
	        		}
	        	}
	        	        }
	        in.close();
	        java.util.Iterator<String> iter = links.keySet().iterator();
			while(iter.hasNext()){
				String temp = iter.next();
				int temp2 = links.get(temp);
				System.out.println(temp + "- " + temp2);
			}

		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
